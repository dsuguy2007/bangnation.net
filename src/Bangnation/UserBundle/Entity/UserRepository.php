<?php

namespace Bangnation\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Bangnation\UserBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * Return friends for a given user context
     * 
     * @param Bangnation\UserBundle\Entity\User $user
     * @return null|array
     */
    public function getFriendsForUser(User $user)
    {
        if ($user === null) {
            return null;
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('f')
                ->from('BangnationUserBundle:Friendship', 'f')
                ->where('f.accepted is not null')
                ->andWhere('f.user_id = :user_id')
                ->setParameter('user_id', $user->getId())
        ;

        $query = $qb->getQuery();

        return $query->execute();
    }

    /**
     * Return friend requests for a given user context
     * 
     * @param Bangnation\UserBundle\Entity\User $user
     * @return null|array
     */
    public function getFriendRequestsForUser(User $user)
    {
        if ($user === null) {
            return null;
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('f')
                ->from('BangnationUserBundle:Friendship', 'f')
                ->where('f.accepted is null')
                ->andWhere('f.user_id = :user_id')
                ->setParameter('user_id', $user->getId())
        ;

        $query = $qb->getQuery();

        return $query->execute();
    }

    /**
     * Return friend request for a given user context
     * 
     * @param integer $id
     * @param Bangnation\UserBundle\Entity\User $user
     * @return null|array
     */
    public function getFriendRequestForUser($id, User $user)
    {
        if ($user === null) {
            return null;
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('f')
                ->from('BangnationUserBundle:Friendship', 'f')
                ->where('f.accepted is null')
                ->andWhere('f.id = :id')
                ->andWhere('f.user_id = :user_id')
                ->setParameters(array(
                    'id' => $id,
                    'user_id' => $user->getId(),
                ))
        ;

        $query = $qb->getQuery();

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Return users not requested or friended
     * 
     * @param Bangnation\UserBundle\Entity\User $user
     * @return null|array
     */
    public function getNonFriendsForUser(User $user)
    {
        if ($user === null) {
            return null;
        }

        $qb2 = $this->getEntityManager()->createQueryBuilder();
        $query2 = $qb2->select('f.friend_id')
                ->distinct()
                ->from('BangnationUserBundle:Friendship', 'f')
                ->where("f.user_id = {$user->getId()}")
                ->getQuery()
        ;
        $results = $query2->execute();
        $parameters = array();
        foreach ($results as $result) {
            $parameters[] = $result['friend_id'];
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('u')
                ->from('BangnationUserBundle:User', 'u')
        ;
        
        if (count($parameters) > 0) {
            $qb->add('where', $qb->expr()->notIn('u.id', $parameters));
        }

        $query = $qb->getQuery();

        return $query->execute();
    }

}
